- FoldingProject.java
calcSCFG(), 1)do inside first, 2)then outside, 3)then setting s and d prob, 4)then expectation.

if do 4) before 3), then get a different expectation E1. 
if do 1) again after 3), then get a different inside (the one I need, I1).
if do 2) again after 3), then get a different outside O1, and a different expectation in 4) but same value as E1! 

step 2) will reset the base pairs probs

the s and d prob setting part of 3) only change the scfg rule probs for terminals; the entropy calculation(EM algorithm) part of 3) actually does not change the scfg rule probs for terminal parts
so where does the constraint add to scfg probs?

probmatrix is getting from createPhyloProb() part, then combined with constraints; probmatrix2 is probmatrix with diffbp==true (but set to be false)

in the constraint file, the coordinates are based on the MSA with gaps (i.e. gaps are counted as positions too)

Debug:
1.
	fatal error occured when running gca-alignment_few_sy.fasta and "F 1 0 2"
	warning at (prob>1):
	System.err.println("Warning: Pd(" + i + ", " + j +
							") = " + number + " > 1! (Using 1...)" );

2.
	variables in inside.L matrix first row (gca-alignment_few_sy.fasta):
	
	manually		ppfold
	0.32572226849  0.3314111
	0.18954937824  0.1965999125
	0.13509310442  0.1426882125
	0.24423824883  0.2507419
	
	the difference is because of in "manually", the calculation is done by: P(L->s)*P(s->A|U|G|C),
	P(L->s) is Grammar 1-P(L->dFd), and P(s->A|U|G|C) is the single group probabilities (not the reduced
	probabilites, they are overall probabilities in the original paper Table1), both in matrix.in file;
	while in "ppfold", P(s->A|U|G|C) first mutiplies a evolutionary factor in createPhyloProb(), the result
	stores in probmatrix[][], then do the above mutiplication.
	
	
	

- matrices.in
Reduced probabilities are the "overall A C G U probabilities" in the paper (Table1)


- PPfold.main calls thread.start(), where thread is a PPfoldMain object


- Parameters.java: 
Reads and stores the input parameters (scfg, paired and un-paired prob, etc) at res/matrices.in
The scfg rule probs are in param and prob[][] in most of the scripts


- PPfoldMain.fold() is in charge of folding


- ForcedConstraints.java:
read in constraints like:
To force a region of length k, starting with nucleotide i, to be unpaired:
P i 0 k 
data[i][j]==2 and data[i][i]==3 correspond to single-stranded constraints


- ForcedConstraints is one of the ExtraData list


- Inside.java
build the three n*n matrices L, S, F for all the grammers
bifurcation happens when S->LS and F->LS




 